// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  AGENT
  MANUFACTURER
  CUSTOMER
  ADMIN
}


enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  CONFIRMED
  COMPLETED
  CANCELLED
}

model User {
  id           BigInt    @id @default(autoincrement())
  phoneNumber  String    @unique
  countryCode  String    @default("+91")
  userType     UserType
  isVerified   Boolean   @default(false)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLogin    DateTime?

  // Relations
  profile      UserProfile?
  otps         OTP[]
  sessions     LoginSession[]
  auditLogs    AuditLog[]
  agent        Agent?
  manufacturer Manufacturer?
  employee     Employee?
  approvedAgents Agent[] @relation("AgentApprovedBy")
  verifiedManufacturers Manufacturer[] @relation("ManufacturerVerifiedBy")

  @@map("users")
  @@index([userType])
  @@index([isVerified])
  @@index([createdAt])
}

model UserProfile {
  id              BigInt   @id @default(autoincrement())
  userId          BigInt   @unique
  fullName        String?
  email           String?  @unique
  profileImageUrl String?
  dateOfBirth     DateTime?
  gender          Gender?
  address         Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
  @@index([email])
  @@index([fullName])
}

model OTP {
  id          BigInt   @id @default(autoincrement())
  phoneNumber String
  otpCode     String
  userType    UserType
  isUsed      Boolean  @default(false)
  expiresAt   DateTime
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())

  user        User?    @relation(fields: [phoneNumber], references: [phoneNumber])

  @@map("otps")
  @@index([phoneNumber])
  @@index([expiresAt])
  @@index([isUsed])
  @@index([createdAt])
}

model LoginSession {
  id           BigInt   @id @default(autoincrement())
  userId       BigInt
  sessionToken String   @unique @db.VarChar(500)
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_sessions")
  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
}

model Agent {
  id             BigInt   @id @default(autoincrement())
  userId         BigInt   @unique
  agentCode      String   @unique
  commissionRate Float    @default(0.0)
  totalEarnings  Float    @default(0.0)
  assignedArea   String?
  isApproved     Boolean  @default(false)
  approvedById   BigInt?
  approvedAt     DateTime?
  bankDetails    Json?
  createdAt      DateTime @default(now())
  supervisorId   BigInt?

  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy     User?     @relation("AgentApprovedBy", fields: [approvedById], references: [id])
  supervisedAgents Agent[] @relation("AgentSupervisor")
  supervisor     Agent?    @relation("AgentSupervisor", fields: [supervisorId], references: [id])

  @@map("agents")
  @@index([userId])
  @@index([agentCode])
  @@index([isApproved])
  @@index([assignedArea])
}

model Manufacturer {
  id                  BigInt    @id @default(autoincrement())
  userId              BigInt    @unique
  companyName         String
  businessType        String?
  gstNumber           String?   @unique
  panNumber           String?   @unique
  businessAddress     Json?
  websiteUrl          String?
  isVerified          Boolean   @default(false)
  verifiedById        BigInt?
  verifiedAt          DateTime?
  description         String?
  established         Int?
  location            String?
  rating              Float     @default(4.0)
  image               String?
  exportCountriesCount Int      @default(0)
  createdAt           DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy      User?     @relation("ManufacturerVerifiedBy", fields: [verifiedById], references: [id])
  founders        Founder[]
  companyInfo     CompanyInfo?
  contact         Contact?
  certifications  ManufacturerCertification[]
  specializations ManufacturerSpecialization[]
  achievements    ManufacturerAchievement[]
  manufacturerProducts ManufacturerProduct[]
  orders          Order[]
  manufacturerEmployees ManufacturerEmployee[]

  @@map("manufacturers")
  @@index([userId])
  @@index([gstNumber])
  @@index([panNumber])
  @@index([companyName])
  @@index([isVerified])
}

model Founder {
  id             BigInt   @id @default(autoincrement())
  name           String
  experience     String?
  qualification  String?
  manufacturerId BigInt

  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("founders")
  @@index([manufacturerId])
}

model CompanyInfo {
  id              BigInt  @id @default(autoincrement())
  employees       Int?
  annualTurnover  String?
  exportCountries Int?
  manufacturerId  BigInt  @unique

  manufacturer    Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("company_info")
}

model Contact {
  id             BigInt  @id @default(autoincrement())
  phone          String?
  email          String?
  website        String?
  address        String?
  manufacturerId BigInt  @unique

  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Certification {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String?

  manufacturers ManufacturerCertification[]

  @@map("certifications")
  @@index([name])
}

model ManufacturerCertification {
  manufacturerId  BigInt
  certificationId BigInt

  manufacturer   Manufacturer  @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  certification  Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, certificationId])
  @@map("manufacturer_certifications")
  @@index([certificationId])
}

model Specialization {
  id   BigInt  @id @default(autoincrement())
  name String

  manufacturers ManufacturerSpecialization[]

  @@map("specializations")
  @@index([name])
}

model ManufacturerSpecialization {
  manufacturerId   BigInt
  specializationId BigInt

  manufacturer    Manufacturer   @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  specialization  Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, specializationId])
  @@map("manufacturer_specializations")
  @@index([specializationId])
}

model Achievement {
  id   BigInt  @id @default(autoincrement())
  name String
  year Int?

  manufacturers ManufacturerAchievement[]

  @@map("achievements")
  @@index([name])
  @@index([year])
}

model ManufacturerAchievement {
  manufacturerId BigInt
  achievementId  BigInt

  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  achievement  Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, achievementId])
  @@map("manufacturer_achievements")
  @@index([achievementId])
}

model Product {
  id             String   @id
  name           String
  category       String?
  priceRange     String?
  imageUrl       String?
  qualityRating  Float?
  offer          String?
  buyersCount    Int?
  returnExchange Boolean?
  cashOnDelivery Boolean?
  paymentOptions String?
  description    String?
  isActive       Boolean?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  attributes     ProductAttribute[]
  orderItems     OrderItem[]
  manufacturerProducts ManufacturerProduct[]

  @@map("products")
}

model ProductAttribute {
  id             BigInt   @id @default(autoincrement())
  attributeType  String
  attributeValue String
  productId      String

  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
  @@index([productId])
  @@index([attributeType])
}

model Order {
  id              String      @id
  customerName    String
  customerEmail   String?
  phoneNumber     String?
  orderDate       DateTime
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  deliveryAddress String?
  notes           String?
  manufacturerId  BigInt?
  assignedTruckOwnerId BigInt?

  manufacturer    Manufacturer? @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  assignedTruckOwner Employee? @relation(fields: [assignedTruckOwnerId], references: [id])
  items           OrderItem[]

  @@map("orders")
  @@index([customerEmail])
  @@index([orderDate])
  @@index([status])
  @@index([manufacturerId])
  @@index([customerName])
  @@index([assignedTruckOwnerId])
}

model OrderItem {
  id                  BigInt   @id @default(autoincrement())
  productId           String?
  manufacturerProductId String?
  orderId             String
  quantity            Int
  unitPrice           Float
  totalPrice          Float

  order               Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product             Product?           @relation(fields: [productId], references: [id], onDelete: Cascade)
  manufacturerProduct ManufacturerProduct? @relation(fields: [manufacturerProductId], references: [id], onDelete: Cascade)

  @@map("order_items")
  @@index([orderId])
  @@index([productId])
  @@index([manufacturerProductId])
}

model Employee {
  id             BigInt   @id @default(autoincrement())
  userId         BigInt   @unique
  employeeCode   String   @unique
  role           String
  status         String   @default("Available")
  currentOrder   Json?
  salary         Float    @default(0.0)
  hireDate       DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedOrders Order[]

  @@map("employees")
  @@index([userId])
  @@index([employeeCode])
  @@index([role])
  @@index([status])
}

model ManufacturerProduct {
  id              String    @id @default(uuid())
  manufacturerId  BigInt
  productId       String?
  name            String
  category        String?
  priceRange      String?
  imageUrl        String?
  qualityRating   Float?    @default(4.0)
  offer           String?
  buyersCount     Int?      @default(0)
  returnExchange  Boolean?  @default(false)
  cashOnDelivery  Boolean?  @default(false)
  paymentOptions  String?
  description     String?
  isActive        Boolean?  @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  stockQuantity   Int?      @default(0)
  minOrderQuantity Int?     @default(1)
  maxOrderQuantity Int?
  weight          Float?
  dimensions      String?
  material        String?
  color           String?
  size            String?
  brand           String?
  sku             String?   @unique
  hsnCode         String?
  gstRate         Float?    @default(0.0)
  discount        Float?    @default(0.0)
  warrantyPeriod  Int?
  returnPolicy    String?

  manufacturer    Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  product         Product?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  orderItems      OrderItem[]

  @@map("manufacturer_products")
  @@index([manufacturerId])
  @@index([productId])
  @@index([category])
  @@index([isActive])
  @@index([createdAt])
  @@index([sku])
}

model AuditLog {
  id          BigInt   @id @default(autoincrement())
  userId      BigInt?
  action      String
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

enum LabourType {
  DRIVER
  LOADMAN
}

enum LabourStatus {
  AVAILABLE
  ASSIGNED
  BUSY
  UNAVAILABLE
}

model ActingLabour {
  id             BigInt        @id @default(autoincrement())
  name           String
  type           LabourType
  phone          String
  email          String?
  location       String
  status         LabourStatus  @default(AVAILABLE)
  rating         Float         @default(0.0)
  experience     Int           @default(0)
  assignedToId   BigInt?
  assignedToType String?
  assignedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("acting_labours")
  @@index([type])
  @@index([status])
  @@index([assignedToId])
  @@index([assignedToType])
}

model ManufacturerEmployee {
  id             BigInt       @id @default(autoincrement())
  manufacturerId BigInt
  name           String
  address        String
  phone          String
  role           String    // agent, truck-owner, driver, loadman, supervisor
  status         String    @default("active") // active, inactive
  joinDate       DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("manufacturer_employees")
  @@index([manufacturerId])
  @@index([role])
  @@index([status])
}
