// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  AGENT
  MANUFACTURER
  CUSTOMER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id           Int       @id @default(autoincrement())
  phoneNumber  String    @unique
  countryCode  String    @default("+91")
  userType     UserType
  isVerified   Boolean   @default(false)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLogin    DateTime?

  // Relations
  profile      UserProfile?
  otps         OTP[]
  sessions     LoginSession[]
  auditLogs    AuditLog[]
  agent        Agent?
  manufacturer Manufacturer?
  employee     Employee?
  approvedAgents Agent[] @relation("AgentApprovedBy")
  verifiedManufacturers Manufacturer[] @relation("ManufacturerVerifiedBy")

  @@map("users")
  @@index([userType])
  @@index([isVerified])
  @@index([createdAt])
}

model UserProfile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  fullName        String?
  email           String?   @unique
  profileImageUrl String?
  dateOfBirth     DateTime?
  gender          Gender?
  address         Json? // {street, city, state, pincode, country}
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
  @@index([email])
  @@index([fullName])
}

model OTP {
  id          Int      @id @default(autoincrement())
  phoneNumber String
  otpCode     String
  userType    UserType
  isUsed      Boolean  @default(false)
  expiresAt   DateTime
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  user        User?    @relation(fields: [phoneNumber], references: [phoneNumber])

  @@map("otps")
  @@index([phoneNumber])
  @@index([expiresAt])
  @@index([isUsed])
  @@index([createdAt])
}

model LoginSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique @db.VarChar(500)
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_sessions")
  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
}

model Agent {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  agentCode      String    @unique
  commissionRate Float     @default(0.0)
  totalEarnings  Float     @default(0.0)
  assignedArea   String?
  isApproved     Boolean   @default(false)
  approvedById   Int?
  approvedAt     DateTime?
  bankDetails    Json?     // {accountNumber, ifscCode, bankName, accountHolderName}
  createdAt      DateTime  @default(now())
  supervisorId   Int?

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy     User?     @relation("AgentApprovedBy", fields: [approvedById], references: [id])
  supervisedAgents Agent[] @relation("AgentSupervisor")
  supervisor     Agent?    @relation("AgentSupervisor", fields: [supervisorId], references: [id])

  @@map("agents")
  @@index([userId])
  @@index([agentCode])
  @@index([isApproved])
  @@index([assignedArea])
}

model Manufacturer {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  companyName     String
  businessType    String?
  gstNumber       String?   @unique
  panNumber       String?   @unique
  businessAddress Json?     // {street, city, state, pincode, country}
  websiteUrl      String?
  isVerified      Boolean   @default(false)
  verifiedById    Int?
  verifiedAt      DateTime?
  description     String?
  established     Int?
  location        String?
  rating          Float     @default(4.0)
  image           String?
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy      User?     @relation("ManufacturerVerifiedBy", fields: [verifiedById], references: [id])
  founders        Founder[]
  companyInfo     CompanyInfo?
  contact         Contact?
  certifications  ManufacturerCertification[]
  specializations ManufacturerSpecialization[]
  achievements    ManufacturerAchievement[]
  manufacturerProducts ManufacturerProduct[]
  orders          Order[]

  @@map("manufacturers")
  @@index([userId])
  @@index([gstNumber])
  @@index([panNumber])
  @@index([companyName])
  @@index([isVerified])
}

model Founder {
  id             Int     @id @default(autoincrement())
  name           String
  experience     String?
  qualification  String?
  manufacturerId Int

  // Relations
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("founders")
  @@index([manufacturerId])
}

model CompanyInfo {
  id              Int    @id @default(autoincrement())
  employees       Int?
  annualTurnover  String?
  exportCountries Int?
  manufacturerId  Int    @unique

  // Relations
  manufacturer    Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("company_info")
}

model Contact {
  id             Int     @id @default(autoincrement())
  phone          String?
  email          String?
  website        String?
  address        String?
  manufacturerId Int     @unique

  // Relations
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Certification {
  id          Int                         @id @default(autoincrement())
  name        String
  description String?

  // Relations
  manufacturers ManufacturerCertification[]

  @@map("certifications")
  @@index([name])
}

model ManufacturerCertification {
  manufacturerId  Int
  certificationId Int

  // Relations
  manufacturer   Manufacturer  @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  certification  Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, certificationId])
  @@map("manufacturer_certifications")
  @@index([certificationId])
}

model Specialization {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  manufacturers ManufacturerSpecialization[]

  @@map("specializations")
  @@index([name])
}

model ManufacturerSpecialization {
  manufacturerId   Int
  specializationId Int

  // Relations
  manufacturer    Manufacturer   @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  specialization  Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, specializationId])
  @@map("manufacturer_specializations")
  @@index([specializationId])
}

model Achievement {
  id   Int    @id @default(autoincrement())
  name String
  year Int?

  // Relations
  manufacturers ManufacturerAchievement[]

  @@map("achievements")
  @@index([name])
  @@index([year])
}

model ManufacturerAchievement {
  manufacturerId Int
  achievementId  Int

  // Relations
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  achievement   Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, achievementId])
  @@map("manufacturer_achievements")
  @@index([achievementId])
}

model Product {
  id             String    @id
  name           String
  category       String
  priceRange     String?
  imageUrl       String?
  qualityRating  Float     @default(4.0)
  offer          String?
  buyersCount    Int       @default(0)
  returnExchange Boolean   @default(false)
  cashOnDelivery Boolean   @default(false)
  paymentOptions Json?     // Array of payment options like ['UPI', 'Card']
  description    String?
  isActive       Boolean   @default(true)

  // Relations
  attributes     ProductAttribute[]
  orderItems     OrderItem[]
  manufacturerProducts ManufacturerProduct[]

  @@map("products")
  @@index([name])
  @@index([category])
}

model ProductAttribute {
  id             Int     @id @default(autoincrement())
  attributeType  String
  attributeValue String
  productId      String

  // Relations
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
  @@index([productId])
  @@index([attributeType])
}

model Order {
  id              String      @id
  customerName    String
  customerEmail   String?
  orderDate       DateTime
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  deliveryAddress String?
  notes           String?
  manufacturerId  Int?
  assignedTruckOwnerId Int?

  // Relations
  manufacturer    Manufacturer? @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  assignedTruckOwner Employee? @relation(fields: [assignedTruckOwnerId], references: [id])
  items           OrderItem[]

  @@map("orders")
  @@index([customerEmail])
  @@index([orderDate])
  @@index([status])
  @@index([manufacturerId])
  @@index([customerName])
  @@index([assignedTruckOwnerId])
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  productId  String
  orderId    String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Relations
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
  @@index([orderId])
  @@index([productId])
}

model Employee {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  employeeCode   String    @unique
  role           String    // Truck Owner, Loader, etc.
  status         String    @default("Available") // Available, On Job, Unavailable
  currentOrder   Json?     // Current assigned task/order details
  salary         Float     @default(0.0)
  hireDate       DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedOrders Order[]

  @@map("employees")
  @@index([userId])
  @@index([employeeCode])
  @@index([role])
  @@index([status])
}

model ManufacturerProduct {
  id             Int     @id @default(autoincrement())
  manufacturerId Int
  productId      String

  // Relations
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([manufacturerId, productId])
  @@map("manufacturer_products")
  @@index([manufacturerId])
  @@index([productId])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int?
  action      String   // login, login_failed, otp_sent, otp_verified, etc.
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

enum LabourType {
  DRIVER
  LOADMAN
}

enum LabourStatus {
  AVAILABLE
  ASSIGNED
  BUSY
  UNAVAILABLE
}

model ActingLabour {
  id             Int           @id @default(autoincrement())
  name           String
  type           LabourType
  phone          String
  email          String?
  location       String
  status         LabourStatus  @default(AVAILABLE)
  rating         Float         @default(0.0)
  experience     Int           @default(0) // years of experience
  assignedToId   Int?          // ID of manufacturer or employee (truck owner)
  assignedToType String?       // 'manufacturer' or 'truck_owner'
  assignedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("acting_labours")
  @@index([type])
  @@index([status])
  @@index([assignedToId])
  @@index([assignedToType])
}
