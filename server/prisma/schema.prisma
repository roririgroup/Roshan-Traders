// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  AGENT
  MANUFACTURER
  CUSTOMER
  ADMIN
}


enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {

  id          BigInt     @id @default(autoincrement())
  phoneNumber String     @unique
  countryCode String     @default("+91")
  userType    UserType
  roles       String[] // Array of roles: ['Agent', 'Manufacturer', 'Truck Owner', 'Driver']
  status      UserStatus @default(PENDING)
  isVerified  Boolean    @default(false)
  isActive    Boolean    @default(true)
  approvedAt  DateTime?
  rejectedAt  DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lastLogin   DateTime?

  id           Int       @id @default(autoincrement())
  phoneNumber  String    @unique
  countryCode  String    @default("+91")
  userType     UserType
  isVerified   Boolean   @default(false)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLogin    DateTime?


  // Relations
  profile               UserProfile?
  otps                  OTP[]
  sessions              LoginSession[]
  auditLogs             AuditLog[]
  agent                 Agent?
  manufacturer          Manufacturer?
  employee              Employee?
  approvedAgents        Agent[]        @relation("AgentApprovedBy")
  verifiedManufacturers Manufacturer[] @relation("ManufacturerVerifiedBy")

  @@index([userType])
  @@index([isVerified])
  @@index([createdAt])
  @@map("users")
}

model UserProfile {

  id              BigInt    @id @default(autoincrement())
  userId          BigInt    @unique

  id              Int      @id @default(autoincrement())
  userId          Int      @unique

  fullName        String?
  email           String?   @unique
  profileImageUrl String?
  dateOfBirth     DateTime?
  gender          Gender?
  address         Json? // {street, city, state, pincode, country}
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([fullName])
  @@map("user_profiles")
}

model OTP {

  id          BigInt   @id @default(autoincrement())

  id          Int      @id @default(autoincrement())

  phoneNumber String
  otpCode     String
  userType    UserType
  isUsed      Boolean  @default(false)
  expiresAt   DateTime
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  user User? @relation(fields: [phoneNumber], references: [phoneNumber])

  @@index([phoneNumber])
  @@index([expiresAt])
  @@index([isUsed])
  @@index([createdAt])
  @@map("otps")
}

model LoginSession {

  id           BigInt   @id @default(autoincrement())
  userId       BigInt

  id           Int      @id @default(autoincrement())
  userId       Int

  sessionToken String   @unique @db.VarChar(500)
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@map("login_sessions")
}

model Agent {

  id             BigInt    @id @default(autoincrement())
  userId         BigInt    @unique

  id             Int       @id @default(autoincrement())
  userId         Int       @unique

  agentCode      String    @unique
  commissionRate Float     @default(0.0)
  totalEarnings  Float     @default(0.0)
  assignedArea   String?
  isApproved     Boolean   @default(false)
  approvedById   Int?
  approvedAt     DateTime?
  bankDetails    Json? // {accountNumber, ifscCode, bankName, accountHolderName}
  createdAt      DateTime  @default(now())
  supervisorId   Int?

  // Relations
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy       User?   @relation("AgentApprovedBy", fields: [approvedById], references: [id])
  supervisedAgents Agent[] @relation("AgentSupervisor")
  supervisor       Agent?  @relation("AgentSupervisor", fields: [supervisorId], references: [id])

  @@index([userId])
  @@index([agentCode])
  @@index([isApproved])
  @@index([assignedArea])
  @@map("agents")
}

model Manufacturer {

  id                   BigInt    @id @default(autoincrement())
  userId               BigInt    @unique
  companyName          String
  businessType         String?
  gstNumber            String?   @unique
  panNumber            String?   @unique
  businessAddress      Json? // {street, city, state, pincode, country}
  websiteUrl           String?
  isVerified           Boolean   @default(false)
  verifiedById         BigInt?
  verifiedAt           DateTime?
  description          String?
  established          Int?
  location             String?
  rating               Float     @default(4.0)
  image                String?
  exportCountriesCount Int       @default(0)
  createdAt            DateTime  @default(now())

  // Relations
  user                 User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy           User?                        @relation("ManufacturerVerifiedBy", fields: [verifiedById], references: [id])
  founders             Founder[]
  companyInfo          CompanyInfo?
  contact              Contact?
  certifications       ManufacturerCertification[]
  specializations      ManufacturerSpecialization[]
  achievements         ManufacturerAchievement[]
  manufacturerProducts ManufacturerProduct[]

  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  companyName     String
  businessType    String?
  gstNumber       String?   @unique
  panNumber       String?   @unique
  businessAddress Json?     // {street, city, state, pincode, country}
  websiteUrl      String?
  isVerified      Boolean   @default(false)
  verifiedById    Int?
  verifiedAt      DateTime?
  description     String?
  established     Int?
  location        String?
  rating          Float     @default(4.0)
  image           String?
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy      User?     @relation("ManufacturerVerifiedBy", fields: [verifiedById], references: [id])
  founders        Founder[]
  companyInfo     CompanyInfo?
  contact         Contact?
  certifications  ManufacturerCertification[]
  specializations ManufacturerSpecialization[]
  achievements    ManufacturerAchievement[]
  products        Product[]

  orders          Order[]

  @@index([userId])
  @@index([gstNumber])
  @@index([panNumber])
  @@index([companyName])
  @@index([isVerified])
  @@map("manufacturers")
}

model Founder {

  id             BigInt  @id @default(autoincrement())

  id             Int     @id @default(autoincrement())

  name           String
  experience     String?
  qualification  String?
  manufacturerId Int

  // Relations
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@index([manufacturerId])
  @@map("founders")
}

model CompanyInfo {

  id              BigInt  @id @default(autoincrement())
  employees       Int?
  annualTurnover  String?
  exportCountries Int?
  manufacturerId  BigInt  @unique

  id              Int    @id @default(autoincrement())
  employees       Int?
  annualTurnover  String?
  exportCountries Int?
  manufacturerId  Int    @unique


  // Relations
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("company_info")
}

model Contact {

  id             BigInt  @id @default(autoincrement())

  id             Int     @id @default(autoincrement())

  phone          String?
  email          String?
  website        String?
  address        String?

  manufacturerId BigInt  @unique

  manufacturerId Int     @unique


  // Relations
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Certification {

  id          BigInt  @id @default(autoincrement())

  id          Int                         @id @default(autoincrement())

  name        String
  description String?

  // Relations
  manufacturers ManufacturerCertification[]

  @@index([name])
  @@map("certifications")
}

model ManufacturerCertification {
  manufacturerId  Int
  certificationId Int

  // Relations
  manufacturer  Manufacturer  @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  certification Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, certificationId])
  @@index([certificationId])
  @@map("manufacturer_certifications")
}

model Specialization {

  id   BigInt @id @default(autoincrement())

  id   Int    @id @default(autoincrement())

  name String

  // Relations
  manufacturers ManufacturerSpecialization[]

  @@index([name])
  @@map("specializations")
}

model ManufacturerSpecialization {
  manufacturerId   Int
  specializationId Int

  // Relations
  manufacturer   Manufacturer   @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  specialization Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, specializationId])
  @@index([specializationId])
  @@map("manufacturer_specializations")
}

model Achievement {

  id   BigInt @id @default(autoincrement())

  id   Int    @id @default(autoincrement())

  name String
  year Int?

  // Relations
  manufacturers ManufacturerAchievement[]

  @@index([name])
  @@index([year])
  @@map("achievements")
}

model ManufacturerAchievement {
  manufacturerId Int
  achievementId  Int

  // Relations
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  achievement  Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@id([manufacturerId, achievementId])
  @@index([achievementId])
  @@map("manufacturer_achievements")
}

model Product {
  id             String  @id
  name           String
  category       String
  priceRange     String?
  imageUrl       String?

  qualityRating  Float   @default(4.0)

  manufacturerId Int?
  qualityRating  Float     @default(4.0)

  offer          String?
  buyersCount    Int     @default(0)
  returnExchange Boolean @default(false)
  cashOnDelivery Boolean @default(false)
  paymentOptions Json? // Array of payment options like ['UPI', 'Card']
  description    String?
  isActive       Boolean @default(true)

  // Relations

  attributes           ProductAttribute[]
  orderItems           OrderItem[]
  manufacturerProducts ManufacturerProduct[]

  manufacturer   Manufacturer?     @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  attributes     ProductAttribute[]
  orderItems     OrderItem[]


  @@index([name])
  @@index([category])

  @@map("products")
}

model ProductAttribute {
  id             BigInt @id @default(autoincrement())

  @@index([manufacturerId])
}

model ProductAttribute {
  id             Int     @id @default(autoincrement())

  attributeType  String
  attributeValue String
  productId      String

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([attributeType])
  @@map("product_attributes")
}

model Order {
  id              String      @id
  customerName    String
  customerEmail   String?
  orderDate       DateTime
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  deliveryAddress String?
  notes           String?
  manufacturerId  Int?

  // Relations

  manufacturer       Manufacturer? @relation(fields: [manufacturerId], references: [id])
  assignedTruckOwner Employee?     @relation(fields: [assignedTruckOwnerId], references: [id])
  items              OrderItem[]
  trips              Trip[]

  manufacturer    Manufacturer? @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  items           OrderItem[]


  @@index([customerEmail])
  @@index([orderDate])
  @@index([status])
  @@index([manufacturerId])
  @@index([customerName])

  @@index([assignedTruckOwnerId])
  @@map("orders")
}

model OrderItem {
  id         BigInt @id @default(autoincrement())

}

model OrderItem {
  id         Int     @id @default(autoincrement())

  productId  String
  orderId    String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Employee {

  id           BigInt   @id @default(autoincrement())
  userId       BigInt   @unique
  employeeCode String   @unique
  role         String // Truck Owner, Loader, etc.
  status       String   @default("Available") // Available, On Job, Unavailable
  currentOrder Json? // Current assigned task/order details
  salary       Float    @default(0.0)
  hireDate     DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedOrders Order[]
  trucks         Truck[]
  trips          Trip[]

  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  employeeCode   String    @unique
  role           String    // Truck Owner, Loader, etc.
  status         String    @default("Available") // Available, On Job, Unavailable
  currentOrder   Json?     // Current assigned task/order details
  salary         Float     @default(0.0)
  hireDate       DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@index([userId])
  @@index([employeeCode])
  @@index([role])
  @@index([status])
  @@map("employees")
}


model ManufacturerProduct {
  id             BigInt @id @default(autoincrement())
  manufacturerId BigInt
  productId      String

  // Relations
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([manufacturerId, productId])
  @@index([manufacturerId])
  @@index([productId])
  @@map("manufacturer_products")
}

model AuditLog {
  id          BigInt   @id @default(autoincrement())
  userId      BigInt?
  action      String // login, login_failed, otp_sent, otp_verified, etc.

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int?
  action      String   // login, login_failed, otp_sent, otp_verified, etc.

  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}


enum LabourType {
  DRIVER
  LOADMAN
}

enum LabourStatus {
  AVAILABLE
  ASSIGNED
  BUSY
  UNAVAILABLE
}

model ActingLabour {
  id             BigInt       @id @default(autoincrement())
  name           String
  type           LabourType
  phone          String
  email          String?
  location       String
  status         LabourStatus @default(AVAILABLE)
  rating         Float        @default(0.0)
  experience     Int          @default(0) // years of experience
  assignedToId   BigInt? // ID of manufacturer or employee (truck owner)
  assignedToType String? // 'manufacturer' or 'truck_owner'
  assignedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  trips Trip[]

  @@index([type])
  @@index([status])
  @@index([assignedToId])
  @@index([assignedToType])
  @@map("acting_labours")
}

model Truck {
  id           BigInt    @id @default(autoincrement())
  truckOwnerId BigInt // Reference to Employee (Truck Owner)
  truckNo      String    @unique
  type         String // Container Truck, Open Truck, etc.
  capacity     String // e.g., "20 Ton"
  rcDetails    String? // RC validity details
  status       String    @default("Active") // Active, Inactive, Maintenance
  documents    Json? // Array of uploaded document names
  nextService  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  truckOwner Employee @relation(fields: [truckOwnerId], references: [id], onDelete: Cascade)
  trips      Trip[]

  @@index([truckOwnerId])
  @@index([truckNo])
  @@index([status])
  @@map("trucks")
}

model Trip {
  id               BigInt    @id @default(autoincrement())
  truckId          BigInt
  driverId         BigInt? // Reference to ActingLabour (Driver)
  truckOwnerId     BigInt // Reference to Employee (Truck Owner)
  fromLocation     String
  toLocation       String
  startTime        DateTime?
  estimatedArrival DateTime?
  actualArrival    DateTime?
  status           String    @default("Upcoming") // Upcoming, Running, Completed, Cancelled
  cargo            String? // Description of cargo
  agent            String? // Agent/Company name
  orderId          String? // Reference to Order if applicable
  podUploaded      Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  truck      Truck         @relation(fields: [truckId], references: [id], onDelete: Cascade)
  driver     ActingLabour? @relation(fields: [driverId], references: [id])
  truckOwner Employee      @relation(fields: [truckOwnerId], references: [id], onDelete: Cascade)
  order      Order?        @relation(fields: [orderId], references: [id])

  @@index([truckId])
  @@index([driverId])
  @@index([truckOwnerId])
  @@index([status])
  @@index([orderId])
  @@map("trips")
}

model ManufacturerEmployee {
  id             BigInt       @id @default(autoincrement())
  manufacturerId BigInt
  name           String
  address        String
  phone          String
  role           String    // agent, truck-owner, driver, loadman, supervisor
  status         String    @default("active") // active, inactive
  joinDate       DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@map("manufacturer_employees")
  @@index([manufacturerId])
  @@index([role])
  @@index([status])
}

